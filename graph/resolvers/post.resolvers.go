package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"

	"github.com/ForwardMoth/graphql-service/graph/generated"
	"github.com/ForwardMoth/graphql-service/graph/models"
	"github.com/ForwardMoth/graphql-service/internal/util/error_handler"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input models.PostInput) (*models.Post, error) {
	newPost, err := r.PostService.CreatePost(input.ToDto())

	if err != nil {
		var rErr error_handler.ResponseError
		if errors.As(err, &rErr) {
			return nil, &gqlerror.Error{
				Extensions: rErr.Extensions(),
			}
		}
	}

	return newPost, nil
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context, limit *int, offset *int) ([]*models.Post, error) {
	posts, err := r.PostService.GetPosts(limit, offset)

	if err != nil {
		var rErr error_handler.ResponseError
		if errors.As(err, &rErr) {
			return nil, &gqlerror.Error{
				Extensions: rErr.Extensions(),
			}
		}
	}

	return models.ToArray(posts), nil
}

// GetPostByID is the resolver for the getPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id int) (*models.Post, error) {
	post, err := r.PostService.GetPostById(id)

	if err != nil {
		var rErr error_handler.ResponseError
		if errors.As(err, &rErr) {
			return nil, &gqlerror.Error{
				Extensions: rErr.Extensions(),
			}
		}
	}

	return post, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
